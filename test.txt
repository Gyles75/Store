# Documentation technique du projet Business Sellers Referential MS

## Sommaire

1. Introduction
2. Architecture Globale
    - Fondation Spring et OpenFeign
    - Stockage et Cache (Redis)
    - Résilience et Monitoring
    - Sécurité (JWT)
    - Conteneurisation et Déploiement
    - Avantages de la stack technique
    - Schéma d’architecture globale (PlantUML)
    - Structure du projet
3. Description Fonctionnelle
    - Introduction
    - Cas d’utilisation (Use cases et diagrammes)
4. Description Technique
    - Technologies utilisées
    - Endpoints REST
5. Services Métier
    - Introduction
    - Description détaillée de chaque service (avec schémas PlantUML)
6. Diagrammes UML
    - Diagramme de classes
    - Diagrammes de séquence
7. Sécurité
8. CI/CD et Déploiement
    - Intégration CI/CD
    - Pipeline CI/CD
9. Conclusion
10. Glossaire
11. Annexe

---

## 1. Introduction

Le microservice **Business Sellers Referential MS** centralise la gestion des utilisateurs et des points de vente pour le projet SmartConnect. Il orchestre la création, la modification, la suspension et la réactivation des utilisateurs, ainsi que l’initialisation et la gestion des points de vente. Ce service s’adresse à plusieurs profils : partenaires, animateurs commerciaux, administrateurs et support[^1].

---

## 2. Architecture Globale

### Fondation Spring et OpenFeign

Le projet est basé sur **Spring Boot** (3.1.9), un framework Java moderne qui facilite la création d’applications web robustes. Il intègre **OpenFeign** pour simplifier les appels HTTP vers d’autres microservices, permettant ainsi une communication fluide et résiliente entre composants[^1].

**Vulgarisation** : Spring Boot permet de créer rapidement des applications tout-en-un, tandis qu’OpenFeign agit comme un traducteur automatique pour parler à d’autres services.

### Stockage et Cache (Redis)

Les informations temporaires et les sessions utilisateurs sont stockées dans **Redis**, une base de données en mémoire ultra-rapide. **Spring Data Redis** permet d’intégrer Redis de façon transparente dans l’application. Cela permet d’accélérer les accès aux données, notamment pour la gestion du cache utilisateur et des processus métiers sensibles à la performance[^1].

**Vulgarisation** : Redis est comme un carnet de notes ultra-rapide pour retenir qui est connecté ou garder des infos critiques prêtes à l’emploi.

### Résilience et Monitoring

La robustesse du système est assurée par **Resilience4j** (gestion des coupures et des erreurs sur les appels externes), **Micrometer** (collecte des métriques pour Prometheus), et **Log4j2** (journalisation des événements). Ces outils garantissent la stabilité du service, la surveillance en temps réel et la traçabilité des incidents[^1].

**Vulgarisation** : Si un service voisin tombe, Resilience4j évite la panne en attendant ou en coupant le lien. Micrometer observe la santé du service, et Log4j2 garde la trace de tout ce qui se passe.

### Sécurité (JWT)

L’accès aux ressources est protégé par des **JWT** (JSON Web Tokens), qui garantissent que seules les personnes ou applications autorisées peuvent effectuer des actions sensibles. Des filtres et des aspects contrôlent systématiquement les droits à chaque appel[^1].

**Vulgarisation** : Le JWT, c’est comme un badge sécurisé : on le vérifie à chaque porte avant de laisser passer quelqu’un.

### Conteneurisation et Déploiement

Le projet utilise **Docker** pour l’empaquetage, **Lombok** pour simplifier le code, **MapStruct** pour transformer les objets métiers, et **Swagger/OpenAPI** pour documenter automatiquement les API. Le déploiement s’appuie sur des pipelines CI/CD (GitLab, ArgoCD) pour automatiser les tests et la mise en production[^1].

**Vulgarisation** : Docker emballe l’application dans une boîte prête à être livrée. Lombok et MapStruct réduisent la paperasse du code. Swagger génère le mode d’emploi des API automatiquement.

### Avantages de la stack technique

- **Haute disponibilité** : Architecture résiliente, gestion des erreurs et redondance.
- **Sécurité renforcée** : Authentification forte, gestion fine des droits.
- **Évolutivité** : Microservices, conteneurisation et orchestration facilitent la montée en charge.
- **Maintenabilité** : Code structuré, documentation générée, tests automatisés.
- **Observabilité** : Monitoring temps réel, logs détaillés, alertes proactives[^1].

---

### Schéma d’architecture globale (PlantUML)

```plantuml
@startuml
!theme spacelab
actor Utilisateur
cloud "Frontaux" as Front
rectangle "Business Sellers Referential MS" as BSR {
  [API REST]
  [Service Métier]
  [Cache Redis]
  [Sécurité JWT]
}
database "Base de données SQL Server" as DB
cloud "Services externes" as Ext {
  [Directory API]
  [Workflow API]
  [Inwebo API]
  [Security Log API]
}
Utilisateur --&gt; Front
Front --&gt; BSR : Appels HTTP sécurisés
BSR --&gt; DB : Accès aux données
BSR --&gt; [Cache Redis] : Stockage temporaire
BSR --&gt; Ext : Appels via OpenFeign
@enduml
```

---

### Structure du projet

```
business-sellers-referential-ms
├── common/         # Utilitaires, annotations, sécurité, cache
├── infrastructure/ # Connecteurs et DTO pour les APIs externes
├── resource/       # Contrôleurs REST (ApplicationResource, PointOfSaleResource, UserResource)
├── service/        # Logique métier (UserService, PointOfSaleService, etc.)
└── resources/      # Configurations, logs, propriétés d’environnement
```

---

## 3. Description Fonctionnelle

Le service répond à plusieurs besoins : gestion centralisée des utilisateurs, orchestration des points de vente, initialisation, suspension/réactivation, et gestion des droits. Il vise à fluidifier les processus métiers et à renforcer la sécurité des accès.





## 2. Architecture globale (schéma PlantUML)

```plantuml
@startuml
actor Utilisateur
actor Gestionnaire
actor Administrateur
actor Support

rectangle "Business Sellers Referential MS" {
  [API REST]
  [Service métier]
  [Sécurité JWT]
  [Cache Redis]
}

cloud "Référentiel Utilisateurs &amp; PDV"
cloud "Provisioning (Inwebo, Workflow, SecurityLog)"

Utilisateur --&gt; [API REST]
Gestionnaire --&gt; [API REST]
Administrateur --&gt; [API REST]
Support --&gt; [API REST]

[API REST] --&gt; [Service métier]
[Service métier] --&gt; "Référentiel Utilisateurs &amp; PDV"
[Service métier] --&gt; "Provisioning (Inwebo, Workflow, SecurityLog)"
[Service métier] --&gt; [Cache Redis]
[API REST] --&gt; [Sécurité JWT]
@enduml
```

---

## 3. Parcours détaillé de chaque endpoint

### Utilisateurs

#### 1. **Créer un utilisateur**

**POST /users**

**Scénario métier**
Un gestionnaire ou administrateur souhaite ajouter un nouvel utilisateur. Le système vérifie que le demandeur a les droits, contrôle les informations, crée l’utilisateur dans le référentiel, puis notifie les systèmes partenaires pour l’initialisation du compte.

**Diagramme de use case**

```plantuml
@startuml
actor "Gestionnaire"
rectangle "Gestion des utilisateurs" {
  usecase "Ajouter un nouvel utilisateur"
}
"Gestionnaire" --&gt; "Ajouter un nouvel utilisateur"
@enduml
```

**Diagramme de séquence**

```plantuml
@startuml
actor "Gestionnaire"
participant "API"
participant "Service métier"
participant "Référentiel"
participant "Système externe (Inwebo)"

"Gestionnaire" -&gt; "API" : Soumet le formulaire d’ajout
"API" -&gt; "Service métier" : Contrôle des droits et des données
"Service métier" -&gt; "Référentiel" : Crée l’utilisateur dans la base centrale
"Service métier" -&gt; "Système externe (Inwebo)" : Provisionne le compte
"Service métier" -&gt; "API" : Retourne le résultat (succès/erreur)
"API" -&gt; "Gestionnaire" : Affiche la confirmation ou l’erreur
@enduml
```

---

#### 2. **Mettre à jour un utilisateur**

**PATCH /users/{id}**

**Scénario métier**
Un gestionnaire ou administrateur souhaite modifier les informations d’un utilisateur (ex : changement d’email, de statut). Le système vérifie les droits, met à jour les données dans le référentiel, puis synchronise l’état avec les systèmes externes.

**Diagramme de use case**

```plantuml
@startuml
actor "Gestionnaire"
rectangle "Gestion des utilisateurs" {
  usecase "Modifier un utilisateur existant"
}
"Gestionnaire" --&gt; "Modifier un utilisateur existant"
@enduml
```

**Diagramme de séquence**

```plantuml
@startuml
actor "Gestionnaire"
participant "API"
participant "Service métier"
participant "Référentiel"
participant "Système externe (Inwebo)"

"Gestionnaire" -&gt; "API" : Demande de modification
"API" -&gt; "Service métier" : Vérifie les droits et prépare la mise à jour
"Service métier" -&gt; "Référentiel" : Met à jour les informations
"Service métier" -&gt; "Système externe (Inwebo)" : Synchronise le statut (si besoin)
"Service métier" -&gt; "API" : Retourne le résultat
"API" -&gt; "Gestionnaire" : Affiche la confirmation ou l’erreur
@enduml
```

---

#### 3. **Obtenir un utilisateur**

**GET /users/{id}**

**Scénario métier**
Un utilisateur ou gestionnaire veut consulter le détail d’un utilisateur. Le système vérifie les droits d’accès et retourne les informations.

**Diagramme de use case**

```plantuml
@startuml
actor "Utilisateur"
rectangle "Gestion des utilisateurs" {
  usecase "Consulter un utilisateur"
}
"Utilisateur" --&gt; "Consulter un utilisateur"
@enduml
```

**Diagramme de séquence**

```plantuml
@startuml
actor "Utilisateur"
participant "API"
participant "Service métier"
participant "Référentiel"

"Utilisateur" -&gt; "API" : Demande de consultation
"API" -&gt; "Service métier" : Vérifie droits et récupère l’utilisateur
"Service métier" -&gt; "Référentiel" : Recherche l’utilisateur
"Service métier" -&gt; "API" : Retourne les infos
"API" -&gt; "Utilisateur" : Affiche les infos
@enduml
```

---

#### 4. **Rechercher des utilisateurs**

**GET /users/?firstName=\&...**

**Scénario métier**
Un gestionnaire souhaite rechercher des utilisateurs selon des critères (nom, prénom, email, statut…). Le système filtre les résultats selon les droits du demandeur.

**Diagramme de use case**

```plantuml
@startuml
actor "Gestionnaire"
rectangle "Gestion des utilisateurs" {
  usecase "Rechercher des utilisateurs"
}
"Gestionnaire" --&gt; "Rechercher des utilisateurs"
@enduml
```

**Diagramme de séquence**

```plantuml
@startuml
actor "Gestionnaire"
participant "API"
participant "Service métier"
participant "Référentiel"

"Gestionnaire" -&gt; "API" : Saisit les critères de recherche
"API" -&gt; "Service métier" : Contrôle les droits et transmet les critères
"Service métier" -&gt; "Référentiel" : Recherche les utilisateurs correspondants
"Service métier" -&gt; "API" : Retourne la liste filtrée
"API" -&gt; "Gestionnaire" : Affiche les résultats
@enduml
```

---

#### 5. **Obtenir la liste des utilisateurs candidats à la revue**

**POST /users/review**

**Scénario métier**
Un gestionnaire souhaite lister les utilisateurs dont la situation doit être revue (ex : droits à valider, comptes à vérifier). Le système filtre selon le périmètre du gestionnaire.

**Diagramme de use case**

```plantuml
@startuml
actor "Gestionnaire"
rectangle "Gestion des utilisateurs" {
  usecase "Lister les utilisateurs à revoir"
}
"Gestionnaire" --&gt; "Lister les utilisateurs à revoir"
@enduml
```

**Diagramme de séquence**

```plantuml
@startuml
actor "Gestionnaire"
participant "API"
participant "Service métier"
participant "Référentiel"

"Gestionnaire" -&gt; "API" : Demande la liste à revoir
"API" -&gt; "Service métier" : Vérifie le périmètre
"Service métier" -&gt; "Référentiel" : Récupère les utilisateurs concernés
"Service métier" -&gt; "API" : Retourne la liste
"API" -&gt; "Gestionnaire" : Affiche la liste
@enduml
```

---

#### 6. **Centraliser un gestionnaire sur des points de vente**

**POST /users/{id}/manage**

**Scénario métier**
Un gestionnaire prend la responsabilité de nouveaux points de vente. Le système vérifie qu’il a le droit de gérer ces entités, puis met à jour la répartition.

**Diagramme de use case**

```plantuml
@startuml
actor "Gestionnaire"
rectangle "Gestion des utilisateurs" {
  usecase "Prendre en charge des points de vente"
}
"Gestionnaire" --&gt; "Prendre en charge des points de vente"
@enduml
```

**Diagramme de séquence**

```plantuml
@startuml
actor "Gestionnaire"
participant "API"
participant "Service métier"
participant "Référentiel"

"Gestionnaire" -&gt; "API" : Désigne les points de vente à gérer
"API" -&gt; "Service métier" : Vérifie la légitimité
"Service métier" -&gt; "Référentiel" : Met à jour la liste des points de vente gérés
"Service métier" -&gt; "API" : Retourne le résultat
"API" -&gt; "Gestionnaire" : Affiche la confirmation
@enduml
```

---

#### 7. **Décentraliser un gestionnaire**

**POST /users/{id}/unmanage**

**Scénario métier**
Un gestionnaire souhaite céder la gestion de certains points de vente. Le système vérifie la légitimité de la demande et effectue la modification.

**Diagramme de use case**

```plantuml
@startuml
actor "Gestionnaire"
rectangle "Gestion des utilisateurs" {
  usecase "Céder la gestion de points de vente"
}
"Gestionnaire" --&gt; "Céder la gestion de points de vente"
@enduml
```

**Diagramme de séquence**

```plantuml
@startuml
actor "Gestionnaire"
participant "API"
participant "Service métier"
participant "Référentiel"

"Gestionnaire" -&gt; "API" : Indique les points de vente à céder
"API" -&gt; "Service métier" : Vérifie la légitimité
"Service métier" -&gt; "Référentiel" : Retire les points de vente du périmètre
"Service métier" -&gt; "API" : Retourne le résultat
"API" -&gt; "Gestionnaire" : Affiche la confirmation
@enduml
```

---

#### 8. **Suspendre des utilisateurs**

**POST /users/suspend**

**Scénario métier**
Un gestionnaire ou administrateur souhaite suspendre l’accès de certains utilisateurs (départ, inactivité, sécurité). Le système met à jour leur statut et informe les systèmes externes.

**Diagramme de use case**

```plantuml
@startuml
actor "Gestionnaire"
rectangle "Gestion des utilisateurs" {
  usecase "Suspendre des utilisateurs"
}
"Gestionnaire" --&gt; "Suspendre des utilisateurs"
@enduml
```

**Diagramme de séquence**

```plantuml
@startuml
actor "Gestionnaire"
participant "API"
participant "Service métier"
participant "Référentiel"
participant "Système externe (Inwebo)"

"Gestionnaire" -&gt; "API" : Sélectionne les utilisateurs à suspendre
"API" -&gt; "Service métier" : Vérifie les droits
"Service métier" -&gt; "Référentiel" : Met à jour le statut
"Service métier" -&gt; "Système externe (Inwebo)" : Désactive les comptes
"Service métier" -&gt; "API" : Retourne le résultat
"API" -&gt; "Gestionnaire" : Affiche la confirmation
@enduml
```

---

#### 9. **Réactiver des utilisateurs**

**POST /users/reactivate**

**Scénario métier**
Un gestionnaire ou administrateur souhaite réactiver l’accès d’utilisateurs précédemment suspendus.

**Diagramme de use case**

```plantuml
@startuml
actor "Gestionnaire"
rectangle "Gestion des utilisateurs" {
  usecase "Réactiver des utilisateurs"
}
"Gestionnaire" --&gt; "Réactiver des utilisateurs"
@enduml
```

**Diagramme de séquence**

```plantuml
@startuml
actor "Gestionnaire"
participant "API"
participant "Service métier"
participant "Référentiel"
participant "Système externe (Inwebo)"

"Gestionnaire" -&gt; "API" : Sélectionne les utilisateurs à réactiver
"API" -&gt; "Service métier" : Vérifie les droits
"Service métier" -&gt; "Référentiel" : Met à jour le statut
"Service métier" -&gt; "Système externe (Inwebo)" : Réactive les comptes
"Service métier" -&gt; "API" : Retourne le résultat
"API" -&gt; "Gestionnaire" : Affiche la confirmation
@enduml
```

### 10. Envoyer un lien d’enrôlement

**POST /users/{id}/sendEnrollmentLink**
**Scénario métier**
Un gestionnaire ou administrateur souhaite permettre à un utilisateur d’activer son compte ou un nouvel appareil : le système génère un lien sécurisé et l’envoie par mail à l’utilisateur.

**Use case**

```plantuml
@startuml
actor "Gestionnaire"
rectangle "Gestion des utilisateurs" {
  usecase "Envoyer un lien d’activation à un utilisateur"
}
"Gestionnaire" --&gt; "Envoyer un lien d’activation à un utilisateur"
@enduml
```

**Diagramme de séquence**

```plantuml
@startuml
actor "Gestionnaire"
participant "API"
participant "Service métier"
participant "Système d’envoi de mail"

"Gestionnaire" -&gt; "API" : Demande d’envoi du lien
"API" -&gt; "Service métier" : Vérifie droits, génère le lien sécurisé
"Service métier" -&gt; "Système d’envoi de mail" : Envoie le lien à l’utilisateur
"Service métier" -&gt; "API" : Confirme l’envoi
"API" -&gt; "Gestionnaire" : Affiche la confirmation
@enduml
```

---

### 11. Envoyer un code de déblocage

**POST /users/sendUnlockCode**
**Scénario métier**
Un utilisateur ayant perdu l’accès à son compte peut recevoir un code temporaire par email pour débloquer son accès.

**Use case**

```plantuml
@startuml
actor "Utilisateur"
rectangle "Gestion des utilisateurs" {
  usecase "Recevoir un code de déblocage"
}
"Utilisateur" --&gt; "Recevoir un code de déblocage"
@enduml
```

**Diagramme de séquence**

```plantuml
@startuml
actor "Utilisateur"
participant "API"
participant "Service métier"
participant "Système d’envoi de mail"

"Utilisateur" -&gt; "API" : Demande le code de déblocage
"API" -&gt; "Service métier" : Vérifie l’éligibilité
"Service métier" -&gt; "Système d’envoi de mail" : Génère et envoie le code
"Service métier" -&gt; "API" : Confirme l’envoi
"API" -&gt; "Utilisateur" : Affiche la confirmation
@enduml
```

---

### 12. Envoyer le code d’identifiant

**POST /users/sendLogin**
**Scénario métier**
Un utilisateur ayant oublié son identifiant peut demander à le recevoir par email.

**Use case**

```plantuml
@startuml
actor "Utilisateur"
rectangle "Gestion des utilisateurs" {
  usecase "Recevoir son identifiant par mail"
}
"Utilisateur" --&gt; "Recevoir son identifiant par mail"
@enduml
```

**Diagramme de séquence**

```plantuml
@startuml
actor "Utilisateur"
participant "API"
participant "Service métier"
participant "Système d’envoi de mail"

"Utilisateur" -&gt; "API" : Demande son identifiant
"API" -&gt; "Service métier" : Vérifie l’identité
"Service métier" -&gt; "Système d’envoi de mail" : Envoie l’identifiant
"Service métier" -&gt; "API" : Confirme l’envoi
"API" -&gt; "Utilisateur" : Affiche la confirmation
@enduml
```

---

### 13. Générer un code d’enrôlement

**POST /users/generateEnrollmentCode**
**Scénario métier**
Un gestionnaire ou administrateur souhaite générer un code unique pour permettre à un utilisateur d’activer son compte ou un appareil.

**Use case**

```plantuml
@startuml
actor "Gestionnaire"
rectangle "Gestion des utilisateurs" {
  usecase "Générer un code d’enrôlement"
}
"Gestionnaire" --&gt; "Générer un code d’enrôlement"
@enduml
```

**Diagramme de séquence**

```plantuml
@startuml
actor "Gestionnaire"
participant "API"
participant "Service métier"
participant "Système externe (Inwebo)"

"Gestionnaire" -&gt; "API" : Demande de génération de code
"API" -&gt; "Service métier" : Vérifie droits et identité
"Service métier" -&gt; "Système externe (Inwebo)" : Génère le code
"Service métier" -&gt; "API" : Retourne le code
"API" -&gt; "Gestionnaire" : Affiche le code
@enduml
```

---

### 14. Générer un lien d’enrôlement

**POST /users/{id}/generateEnrollmentLink**
**Scénario métier**
Un gestionnaire ou administrateur souhaite générer un lien spécifique pour permettre à un utilisateur d’activer son compte.

**Use case**

```plantuml
@startuml
actor "Gestionnaire"
rectangle "Gestion des utilisateurs" {
  usecase "Générer un lien d’enrôlement"
}
"Gestionnaire" --&gt; "Générer un lien d’enrôlement"
@enduml
```

**Diagramme de séquence**

```plantuml
@startuml
actor "Gestionnaire"
participant "API"
participant "Service métier"
participant "Système externe (Inwebo)"

"Gestionnaire" -&gt; "API" : Demande de génération de lien
"API" -&gt; "Service métier" : Vérifie droits et identité
"Service métier" -&gt; "Système externe (Inwebo)" : Génère le lien
"Service métier" -&gt; "API" : Retourne le lien
"API" -&gt; "Gestionnaire" : Affiche le lien
@enduml
```

---

### 15. Générer un code de déblocage

**POST /users/{id}/generateUnlockCode**
**Scénario métier**
Un gestionnaire ou administrateur souhaite générer un code temporaire pour débloquer un compte utilisateur.

**Use case**

```plantuml
@startuml
actor "Gestionnaire"
rectangle "Gestion des utilisateurs" {
  usecase "Générer un code de déblocage"
}
"Gestionnaire" --&gt; "Générer un code de déblocage"
@enduml
```

**Diagramme de séquence**

```plantuml
@startuml
actor "Gestionnaire"
participant "API"
participant "Service métier"
participant "Système externe (Inwebo)"

"Gestionnaire" -&gt; "API" : Demande de génération de code
"API" -&gt; "Service métier" : Vérifie droits et identité
"Service métier" -&gt; "Système externe (Inwebo)" : Génère le code
"Service métier" -&gt; "API" : Retourne le code
"API" -&gt; "Gestionnaire" : Affiche le code
@enduml
```

---

### 16. Obtenir les appareils d’un utilisateur

**GET /users/{id}/devices**
**Scénario métier**
Un gestionnaire ou l’utilisateur souhaite consulter la liste des appareils connectés à son compte.

**Use case**

```plantuml
@startuml
actor "Utilisateur"
rectangle "Gestion des utilisateurs" {
  usecase "Consulter la liste de ses appareils"
}
"Utilisateur" --&gt; "Consulter la liste de ses appareils"
@enduml
```

**Diagramme de séquence**

```plantuml
@startuml
actor "Utilisateur"
participant "API"
participant "Service métier"
participant "Système externe (Inwebo)"

"Utilisateur" -&gt; "API" : Demande la liste des appareils
"API" -&gt; "Service métier" : Vérifie droits et identité
"Service métier" -&gt; "Système externe (Inwebo)" : Récupère la liste
"Service métier" -&gt; "API" : Retourne la liste
"API" -&gt; "Utilisateur" : Affiche les appareils
@enduml
```

---

### 17. Débuter une réactivation autonome

**POST /users/{id}/beginSelfReactivation**
**Scénario métier**
L’utilisateur lance lui-même le processus de réactivation de son compte (ex : compte suspendu).

**Use case**

```plantuml
@startuml
actor "Utilisateur"
rectangle "Gestion des utilisateurs" {
  usecase "Démarrer la réactivation de son compte"
}
"Utilisateur" --&gt; "Démarrer la réactivation de son compte"
@enduml
```

**Diagramme de séquence**

```plantuml
@startuml
actor "Utilisateur"
participant "API"
participant "Service métier"
participant "Système externe (Workflow)"

"Utilisateur" -&gt; "API" : Demande de réactivation
"API" -&gt; "Service métier" : Vérifie l’éligibilité
"Service métier" -&gt; "Système externe (Workflow)" : Démarre le processus
"Service métier" -&gt; "API" : Retourne le statut
"API" -&gt; "Utilisateur" : Affiche la confirmation
@enduml
```

---

### 18. Finaliser la réactivation autonome

**POST /users/processSelfReactivation**
**Scénario métier**
L’utilisateur termine le processus de réactivation (ex : après validation d’un code ou d’un lien).

**Use case**

```plantuml
@startuml
actor "Utilisateur"
rectangle "Gestion des utilisateurs" {
  usecase "Finaliser la réactivation de son compte"
}
"Utilisateur" --&gt; "Finaliser la réactivation de son compte"
@enduml
```

**Diagramme de séquence**

```plantuml
@startuml
actor "Utilisateur"
participant "API"
participant "Service métier"
participant "Système externe (Workflow)"

"Utilisateur" -&gt; "API" : Soumet la validation finale
"API" -&gt; "Service métier" : Vérifie la conformité
"Service métier" -&gt; "Système externe (Workflow)" : Finalise le processus
"Service métier" -&gt; "API" : Retourne le résultat
"API" -&gt; "Utilisateur" : Affiche la confirmation
@enduml
```

---

### 19. Obtenir les security logs d’un utilisateur

**GET /users/{id}/securityLogs**
**Scénario métier**
Un gestionnaire ou l’utilisateur consulte l’historique des actions de sécurité liées à un compte.

**Use case**

```plantuml
@startuml
actor "Gestionnaire"
rectangle "Gestion des utilisateurs" {
  usecase "Consulter l’historique de sécurité d’un utilisateur"
}
"Gestionnaire" --&gt; "Consulter l’historique de sécurité d’un utilisateur"
@enduml
```

**Diagramme de séquence**

```plantuml
@startuml
actor "Gestionnaire"
participant "API"
participant "Service métier"
participant "Système externe (SecurityLog)"

"Gestionnaire" -&gt; "API" : Demande l’historique
"API" -&gt; "Service métier" : Vérifie droits et identité
"Service métier" -&gt; "Système externe (SecurityLog)" : Récupère les logs
"Service métier" -&gt; "API" : Retourne les logs
"API" -&gt; "Gestionnaire" : Affiche les logs
@enduml
```

---

## Points de vente

### 1. Mettre à jour un point de vente

**PATCH /pointsOfSale/{id}**
**Scénario métier**
Un gestionnaire ou administrateur souhaite modifier les informations d’un point de vente (ex : nom, statut).

**Use case**

```plantuml
@startuml
actor "Gestionnaire"
rectangle "Gestion des points de vente" {
  usecase "Mettre à jour un point de vente"
}
"Gestionnaire" --&gt; "Mettre à jour un point de vente"
@enduml
```

**Diagramme de séquence**

```plantuml
@startuml
actor "Gestionnaire"
participant "API"
participant "Service métier"
participant "Référentiel Points de vente"

"Gestionnaire" -&gt; "API" : Demande de modification
"API" -&gt; "Service métier" : Vérifie droits et prépare la mise à jour
"Service métier" -&gt; "Référentiel Points de vente" : Met à jour les informations
"Service métier" -&gt; "API" : Retourne le résultat
"API" -&gt; "Gestionnaire" : Affiche la confirmation
@enduml
```

---

### 2. Obtenir un point de vente

**GET /pointsOfSale/{id}**
**Scénario métier**
Permet de consulter les informations détaillées d’un point de vente.

**Use case**

```plantuml
@startuml
actor "Utilisateur"
rectangle "Gestion des points de vente" {
  usecase "Consulter un point de vente"
}
"Utilisateur" --&gt; "Consulter un point de vente"
@enduml
```

**Diagramme de séquence**

```plantuml
@startuml
actor "Utilisateur"
participant "API"
participant "Service métier"
participant "Référentiel Points de vente"

"Utilisateur" -&gt; "API" : Demande de consultation
"API" -&gt; "Service métier" : Vérifie droits et récupère le point de vente
"Service métier" -&gt; "Référentiel Points de vente" : Recherche le point de vente
"Service métier" -&gt; "API" : Retourne les infos
"API" -&gt; "Utilisateur" : Affiche les infos
@enduml
```

---

### 3. Rechercher des points de vente

**GET /pointsOfSale/?label=\&...**
**Scénario métier**
Recherche de points de vente selon différents critères (nom, code, etc.).

**Use case**

```plantuml
@startuml
actor "Gestionnaire"
rectangle "Gestion des points de vente" {
  usecase "Rechercher des points de vente"
}
"Gestionnaire" --&gt; "Rechercher des points de vente"
@enduml
```

**Diagramme de séquence**

```plantuml
@startuml
actor "Gestionnaire"
participant "API"
participant "Service métier"
participant "Référentiel Points de vente"

"Gestionnaire" -&gt; "API" : Saisit les critères de recherche
"API" -&gt; "Service métier" : Contrôle les droits et transmet les critères
"Service métier" -&gt; "Référentiel Points de vente" : Recherche les points de vente correspondants
"Service métier" -&gt; "API" : Retourne la liste filtrée
"API" -&gt; "Gestionnaire" : Affiche les résultats
@enduml
```

---

### 4. Initialiser un point de vente

**POST /pointsOfSale/initialize**
**Scénario métier**
Permet de créer un nouveau point de vente ou de l’associer à un gestionnaire.

**Use case**

```plantuml
@startuml
actor "Gestionnaire"
rectangle "Gestion des points de vente" {
  usecase "Initialiser un point de vente"
}
"Gestionnaire" --&gt; "Initialiser un point de vente"
@enduml
```

**Diagramme de séquence**

```plantuml
@startuml
actor "Gestionnaire"
participant "API"
participant "Service métier"
participant "Référentiel Points de vente"

"Gestionnaire" -&gt; "API" : Demande d’initialisation
"API" -&gt; "Service métier" : Vérifie droits et prépare la création
"Service métier" -&gt; "Référentiel Points de vente" : Crée ou associe le point de vente
"Service métier" -&gt; "API" : Retourne le résultat
"API" -&gt; "Gestionnaire" : Affiche la confirmation
@enduml
```

---

### 5. Valider la revue d’un point de vente

**POST /pointsOfSale/validateReview**
**Scénario métier**
Un gestionnaire valide la revue des utilisateurs liés à un point de vente.

**Use case**

```plantuml
@startuml
actor "Gestionnaire"
rectangle "Gestion des points de vente" {
  usecase "Valider la revue des utilisateurs d’un point de vente"
}
"Gestionnaire" --&gt; "Valider la revue des utilisateurs d’un point de vente"
@enduml
```

**Diagramme de séquence**

```plantuml
@startuml
actor "Gestionnaire"
participant "API"
participant "Service métier"
participant "Référentiel Points de vente"

"Gestionnaire" -&gt; "API" : Demande de validation
"API" -&gt; "Service métier" : Vérifie droits et prépare la validation
"Service métier" -&gt; "Référentiel Points de vente" : Valide la revue
"Service métier" -&gt; "API" : Retourne le résultat
"API" -&gt; "Gestionnaire" : Affiche la confirmation
@enduml
```

---

### 6. Affecter des applications à un point de vente

**POST /pointsOfSale/assignApplications**
**Scénario métier**
Permet d’associer des applications ou droits à un point de vente.

**Use case**

```plantuml
@startuml
actor "Gestionnaire"
rectangle "Gestion des points de vente" {
  usecase "Affecter des applications à un point de vente"
}
"Gestionnaire" --&gt; "Affecter des applications à un point de vente"
@enduml
```

**Diagramme de séquence**

```plantuml
@startuml
actor "Gestionnaire"
participant "API"
participant "Service métier"
participant "Référentiel Points de vente"

"Gestionnaire" -&gt; "API" : Sélectionne les applications à affecter
"API" -&gt; "Service métier" : Vérifie droits et prépare l’affectation
"Service métier" -&gt; "Référentiel Points de vente" : Affecte les applications
"Service métier" -&gt; "API" : Retourne le résultat
"API" -&gt; "Gestionnaire" : Affiche la confirmation
@enduml
```

---

## Applications

### 1. Obtenir la liste des applications

**GET /applications**
**Scénario métier**
Permet de lister toutes les applications et rôles disponibles dans le système.

**Use case**

```plantuml
@startuml
actor "Utilisateur"
rectangle "Gestion des applications" {
  usecase "Consulter la liste des applications"
}
"Utilisateur" --&gt; "Consulter la liste des applications"
@enduml
```

**Diagramme de séquence**

```plantuml
@startuml
actor "Utilisateur"
participant "API"
participant "Service métier"
participant "Référentiel Applications"

"Utilisateur" -&gt; "API" : Demande la liste des applications
"API" -&gt; "Service métier" : Prépare la requête
"Service métier" -&gt; "Référentiel Applications" : Récupère la liste
"Service métier" -&gt; "API" : Retourne la liste
"API" -&gt; "Utilisateur" : Affiche la liste
@enduml
```

---

### 2. Obtenir le détail d’une application

**GET /applications/{id}**
**Scénario métier**
Permet de consulter les détails d’une application spécifique.

**Use case**

```plantuml
@startuml
actor "Utilisateur"
rectangle "Gestion des applications" {
  usecase "Consulter le détail d’une application"
}
"Utilisateur" --&gt; "Consulter le détail d’une application"
@enduml
```

**Diagramme de séquence**

```plantuml
@startuml
actor "Utilisateur"
participant "API"
participant "Service métier"
participant "Référentiel Applications"

"Utilisateur" -&gt; "API" : Demande le détail de l’application
"API" -&gt; "Service métier" : Prépare la requête
"Service métier" -&gt; "Référentiel Applications" : Récupère les infos
"Service métier" -&gt; "API" : Retourne le détail
"API" -&gt; "Utilisateur" : Affiche le détail
@enduml
```

## 4. Sécurité et gestion des droits

### Vulgarisation du fonctionnement

- **Protection de chaque action** :
Avant chaque opération (création, modification, suspension…), le système vérifie le badge numérique (JWT) présenté par l’appelant.
Ce badge contient le rôle (gestionnaire, admin, support…) et le périmètre d’action (ex : sur quels utilisateurs ou points de vente l’opération est possible).
- **Contrôle d’accès dynamique** :
Un aspect (filtre automatique) intercepte chaque appel :
    - Si l’action est autorisée pour le rôle et le périmètre, elle est exécutée.
    - Sinon, l’accès est refusé et un incident de sécurité est tracé.
- **Traçabilité** :
Chaque action sensible (suspension, réactivation, génération de code, etc.) est tracée via un appel à un service de logs de sécurité externe.

**Diagramme de séquence de contrôle d’accès**

```plantuml
@startuml
actor "Appelant"
participant "API"
participant "Filtre de sécurité"
participant "Service métier"

"Appelant" -&gt; "API" : Fait une requête
"API" -&gt; "Filtre de sécurité" : Vérifie le badge et les droits
alt Autorisé
    "Filtre de sécurité" -&gt; "Service métier" : Laisse passer l’appel
    "Service métier" -&gt; "API" : Exécute l’action
else Refusé
    "Filtre de sécurité" -&gt; "API" : Refuse l’accès et trace l’incident
end
"API" -&gt; "Appelant" : Retourne le résultat ou l’erreur
@enduml
```

---

## 4. Description Technique

### Technologies utilisées

| Technologie | Version | Rôle |
| :-- | :-- | :-- |
| Java | 17 | Langage principal |
| Spring Boot | 3.1.9 | Framework principal |
| Spring Data JPA | 3.1.9 | Accès aux données relationnelles |
| OpenFeign | 3.1.3 | Appels HTTP vers services externes |
| Resilience4j | 3.1.9 | Gestion de la résilience |
| Redis | 3.1.3 | Cache distribué |
| SQL Server | - | Base de données principale |
| Maven | - | Gestionnaire de dépendances |
| Swagger/OpenAPI | 3.1.0 | Documentation automatique des APIs |
| Lombok | - | Réduction du code répétitif |
| MapStruct | 1.5.5 | Mapping objet-objet |
| Log4j2 | - | Journalisation |

### Endpoints REST principaux

| Méthode | Endpoint | Description |
| :-- | :-- | :-- |
| POST | /users | Création d’un nouvel utilisateur |
| PATCH | /users/{id} | Mise à jour d’un utilisateur existant |
| GET | /users/{id} | Récupérer un utilisateur par son identifiant |
| GET | /users/?firstName=\& | Recherche d’utilisateurs par critères |
| POST | /users/review | Liste des utilisateurs candidats à la revue |
| POST | /users/{id}/manage | Centraliser un gestionnaire sur des points de vente |
| POST | /users/{id}/unmanage | Décentraliser un gestionnaire |
| POST | /users/suspend | Suspendre des utilisateurs |
| POST | /users/reactivate | Réactiver des utilisateurs |
| POST | /users/{id}/sendEnrollmentLink | Envoyer le lien d’enrôlement |
| POST | /users/sendUnlockCode | Envoyer le code d’activation |
| POST | /users/sendLogin | Envoyer le code PA par mail |
| POST | /users/generateEnrollmentCode | Générer le code d’enrôlement |
| POST | /users/{id}/generateEnrollmentLink | Générer le lien d’enrôlement |
| POST | /users/{id}/generateUnlockCode | Générer le code d’activation |
| GET | /users/{id}/devices | Obtenir les appareils d’un utilisateur |
| POST | /users/{id}/beginSelfReactivation | Débuter la réactivation autonome |
| POST | /users/processSelfReactivation | Finaliser la réactivation autonome |
| GET | /users/{id}/securityLogs | Obtenir les security logs d’un utilisateur |
| PATCH | /pointsOfSale/{id} | Mise à jour d’un point de vente |
| GET | /pointsOfSale/{id} | Récupérer un point de vente par son identifiant |
| GET | /pointsOfSale/?label=\& | Recherche de points de vente |
| POST | /pointsOfSale/initialize | Initialisation d’un point de vente |
| POST | /pointsOfSale/validateReview | Validation de la revue d’utilisateurs |
| POST | /pointsOfSale/assignApplications | Affectation des frontaux à un point de vente |
| GET | /applications | Liste de toutes les applications et rôles liés |
| GET | /applications/{id} | Détail d’une application |

---

## 5. Services Métier

### Introduction

Les services métiers encapsulent la logique principale : gestion des utilisateurs, des points de vente, de la sécurité, et des interactions avec les systèmes externes.

### Description détaillée de chaque service

#### UserService

- **Rôle** : Orchestrer la création, la modification, la suspension, la réactivation, l’envoi de liens/codes, la gestion des droits et la récupération des informations utilisateur.
- **Interactions** : Dialogue avec Directory API, Inwebo API, Security Log API, et le cache Redis.

**Schéma PlantUML**

```plantuml
@startuml
!theme spacelab
actor "Utilisateur"
participant "API REST"
participant "UserService"
participant "Directory API"
participant "Inwebo API"
participant "Security Log API"
Utilisateur -&gt; API REST : Demande (création, suspension, etc.)
API REST -&gt; UserService : Orchestration métier
UserService -&gt; Directory API : Opérations sur l'utilisateur
UserService -&gt; Inwebo API : Gestion des codes/enrôlement
UserService -&gt; Security Log API : Traçabilité des actions
UserService -&gt; [Cache Redis] : Stockage temporaire
@enduml
```


#### PointOfSaleService

- **Rôle** : Gérer l’initialisation, la modification, l’affectation d’applications et la revue des points de vente.
- **Interactions** : Dialogue avec Directory API, gestion des droits, et le cache.

**Schéma PlantUML**

```plantuml
@startuml
!theme spacelab
actor "Administrateur"
participant "API REST"
participant "PointOfSaleService"
participant "Directory API"
Administrateur -&gt; API REST : Demande d'initialisation PDV
API REST -&gt; PointOfSaleService : Orchestration métier
PointOfSaleService -&gt; Directory API : Création/modification PDV
@enduml
```


#### SecurityService

- **Rôle** : Vérifier les droits, gérer les contextes de sécurité, contrôler les accès via JWT, et publier des événements de sécurité.

**Schéma PlantUML**

```plantuml
@startuml
!theme spacelab
actor "Utilisateur"
participant "API REST"
participant "SecurityService"
Utilisateur -&gt; API REST : Appel sécurisé
API REST -&gt; SecurityService : Vérification du JWT et des droits
SecurityService --&gt; API REST : Autorisation ou rejet
@enduml
```

---

## 5. CI/CD, déploiement et observabilité

### Vulgarisation du pipeline

- **Intégration continue** :
À chaque modification du code, le projet est automatiquement compilé, testé et analysé (qualité, sécurité).
- **Déploiement continu** :
Si tout est vert, une nouvelle version Docker est générée et déployée automatiquement sur les environnements de test, puis de production.
- **Observabilité** :
Grâce à Prometheus et Micrometer, le service expose des métriques : nombre d’appels, erreurs, temps de réponse…
Les logs sont centralisés pour faciliter le diagnostic.

**Schéma pipeline CI/CD**

```plantuml
@startuml
start
:Développeur pousse du code;
:CI compile et teste;
if (Tests OK?) then (oui)
  :Analyse qualité (Sonar);
  if (Qualité OK?) then (oui)
    :Build image Docker;
    :Déploiement auto;
  else (non)
    :Blocage pipeline;
  endif
else (non)
  :Blocage pipeline;
endif
stop
@enduml
```

---

## 6. Structure logicielle vulgarisée

- **common/** :
Tout ce qui est partagé : sécurité, annotations, helpers, gestion du cache, aspects de sécurité, DTO communs.
- **infrastructure/** :
Les connecteurs vers les systèmes externes (référentiel, provisioning, logs, workflow…).
- **resource/** :
Les contrôleurs REST : ils reçoivent les appels, valident les entrées et délèguent au métier.
- **service/** :
La logique métier : orchestration des actions, gestion des droits, appels aux systèmes externes.
- **resources/** :
Les fichiers de configuration, logs, propriétés d’environnement.

---

## 7. Glossaire vulgarisé

- **JWT** : Badge numérique sécurisé qui prouve l’identité et les droits d’un utilisateur.
- **Feign** : Outil qui permet de parler facilement à d’autres services via HTTP.
- **Redis** : Bloc-notes ultra-rapide pour retenir des infos temporaires.
- **Resilience4j** : Parachute de secours pour éviter les pannes en cas d’erreur réseau.
- **CI/CD** : Usine automatisée qui construit, teste et déploie le projet.
- **Swagger/OpenAPI** : Générateur automatique du mode d’emploi des API.

---

## 8. Synthèse

Cette documentation couvre :

- Tous les endpoints, avec leur scénario métier, use case et séquence vulgarisée.
- Les mécanismes de sécurité, de traçabilité et de gestion des droits.
- La chaîne de déploiement et d’observabilité.
- La structure logicielle et le glossaire des termes clés.
